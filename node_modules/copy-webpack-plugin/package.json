{
  "_args": [
    [
      {
        "raw": "copy-webpack-plugin",
        "scope": null,
        "escapedName": "copy-webpack-plugin",
        "name": "copy-webpack-plugin",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/gun/Documents/app/v1/djangodkdtver2/djangodkdt"
    ]
  ],
  "_from": "copy-webpack-plugin",
  "_hasShrinkwrap": false,
  "_id": "copy-webpack-plugin@5.0.1",
  "_location": "/copy-webpack-plugin",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/copy-webpack-plugin_5.0.1_1552310252935_0.9998939049340758"
  },
  "_npmUser": {
    "name": "evilebottnawi",
    "email": "sheo13666q@gmail.com"
  },
  "_npmVersion": "6.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "copy-webpack-plugin",
    "scope": null,
    "escapedName": "copy-webpack-plugin",
    "name": "copy-webpack-plugin",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-5.0.1.tgz",
  "_shasum": "97997989cc5bc69976bf64f660bd19663481f089",
  "_shrinkwrap": null,
  "_spec": "copy-webpack-plugin",
  "_where": "/home/gun/Documents/app/v1/djangodkdtver2/djangodkdt",
  "author": {
    "name": "Len Boyette"
  },
  "babel": {
    "presets": [
      [
        "@babel/preset-env",
        {
          "targets": {
            "node": "6.9.0"
          },
          "useBuiltIns": "usage"
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/copy-webpack-plugin/issues"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {
    "cacache": "^11.3.1",
    "find-cache-dir": "^2.0.0",
    "glob-parent": "^3.1.0",
    "globby": "^7.1.1",
    "is-glob": "^4.0.0",
    "loader-utils": "^1.1.0",
    "minimatch": "^3.0.4",
    "normalize-path": "^3.0.0",
    "p-limit": "^2.1.0",
    "serialize-javascript": "^1.4.0",
    "webpack-log": "^2.0.0"
  },
  "description": "Copy files && directories with webpack",
  "devDependencies": {
    "@babel/cli": "^7.1.5",
    "@babel/core": "^7.1.6",
    "@babel/polyfill": "^7.0.0",
    "@babel/preset-env": "^7.1.6",
    "@commitlint/cli": "^7.5.2",
    "@commitlint/config-conventional": "^7.5.0",
    "@webpack-contrib/defaults": "^3.0.5",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^24.1.0",
    "cross-env": "^5.1.3",
    "del": "^3.0.0",
    "del-cli": "^1.1.0",
    "enhanced-resolve": "^3.4.1",
    "eslint": "^5.13.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-prettier": "^3.0.0",
    "husky": "^1.2.1",
    "is-gzip": "^2.0.0",
    "jest": "^24.0.0",
    "lint-staged": "^8.1.0",
    "memory-fs": "^0.4.1",
    "mkdirp": "^0.5.1",
    "prettier": "^1.14.0",
    "spdy": "^4.0.0",
    "standard-version": "^5.0.0",
    "webpack": "^4.29.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-yMTURAkYZO/6h6pGMbHQl2jpKtRNC+0Cy/4kRRP6qUHmpbGGAzNnyMecE6aHgGFCb4ksrL3YcDqYGb8ds3J9cw==",
    "shasum": "97997989cc5bc69976bf64f660bd19663481f089",
    "tarball": "https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-5.0.1.tgz",
    "fileCount": 12,
    "unpackedSize": 51624,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJchl/tCRA9TVsSAnZWagAANGcP/RxhgqEuuq7eYoM0pmOI\ncjJavmjNgzzZ6eQ2NEgddjWcyJegCS88jVfUlkci9bWyt78JDBpUw/gTczl1\n4kHUVs07K6JVVx5vOzBbFdOo2GuGO+826ejJxcdigkNpnbNKl7g+oTaYUGla\nxslj3I979UM3XpnnSRBtP9E1XHHVR72muaMaSzcvMHnjaD+2C3ldZNC+Je1c\nfi2AHDJOMVHqJNeOyB/cy7vXUmwh7lhmVHV/EE28nWbpOhWt/vES2rtoi6Kh\nTOapGc7Jp/CmccgJ1kO8CHTkO6IuTVuYaVH7Si1LaqIYImhKVDICKcOOhaRw\nLfntUC9+QYq3UcyqIvhwifzv4BYaGp6MS0B7h4FcBZqErQ8268IZP/FOGiMo\nUw8+/as64jhnWrxaOlSC9SVtJxf4+GssxuP7eZmwYf/D72g63ZrgRoBzlwXb\nvp4jJ5YH4e+/G0gJIWvNldBXdF6Fbwhv9OMeuJK8LBE2BDwYen26+/pbKEs5\neBI39+1pdxlFWO9leKpzCqZTbrfmVsB5Kl5TBx68VUM1gmiyeZTgvHS5FQp0\ncXt4nuZjKgCUAzxI8iybZfIcrJgGWfzQUczlHVQAmFKb7dzpAxyPHhHNY3V8\np8cX5QXg1a89ZV8DO14+U4SQd+/YqzOcBl9QA7VvNYWePBNqOc3+zzVCC0o8\nuZDR\r\n=0Gvl\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.9.0"
  },
  "files": [
    "dist"
  ],
  "gitHead": "a8fc34e70f782d32cf41b7fe04c140ccc66d9147",
  "homepage": "https://github.com/webpack-contrib/copy-webpack-plugin",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "webpack",
    "plugin",
    "transfer",
    "move",
    "copy"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    },
    {
      "name": "kevlened",
      "email": "boyettel@gmail.com"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    }
  ],
  "name": "copy-webpack-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0"
  },
  "prettier": {
    "singleQuote": true,
    "trailingComma": "es5",
    "arrowParens": "always"
  },
  "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# copy-webpack-plugin\n\nCopies individual files or entire directories to the build directory.\n\n## Getting Started\n\nTo begin, you'll need to install `copy-webpack-plugin`:\n\n```console\n$ npm install copy-webpack-plugin --save-dev\n```\n\nThen add the loader to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nconst CopyPlugin = require('copy-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      { from: 'source', to: 'dest' },\n      { from: 'other', to: 'public' },\n    ]),\n  ],\n};\n```\n\n> ℹ️ If you want `webpack-dev-server` to write files to the output directory during development, you can force it with the [`writeToDisk`](https://github.com/webpack/webpack-dev-middleware#writetodisk) option or the [`write-file-webpack-plugin`](https://github.com/gajus/write-file-webpack-plugin).\n\n## Options\n\nThe plugin's signature:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin(patterns, options)],\n};\n```\n\n### Patterns\n\n|               Name                |         Type          |                     Default                     | Description                                                                                                                                                                      |\n| :-------------------------------: | :-------------------: | :---------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|          [`from`](#from)          |  `{String\\|Object}`   |                   `undefined`                   | Globs accept [minimatch options](https://github.com/isaacs/minimatch). See the [`node-glob` options](https://github.com/isaacs/node-glob#options) in addition to the ones below. |\n|            [`to`](#to)            |  `{String\\|Object}`   |                   `undefined`                   | Output root if `from` is file or dir, resolved glob path if `from` is glob.                                                                                                      |\n|        [`toType`](#toType)        |      `{String}`       |                   `undefined`                   | `[toType Options](#totype)`.                                                                                                                                                     |\n|          [`test`](#test)          |      `{RegExp}`       |                   `undefined`                   | Pattern for extracting elements to be used in `to` templates.                                                                                                                    |\n|         [`force`](#force)         |      `{Boolean}`      |                     `false`                     | Overwrites files already in `compilation.assets` (usually added by other plugins/loaders).                                                                                       |\n|        [`ignore`](#ignore)        |       `{Array}`       |                      `[]`                       | Globs to ignore for this pattern.                                                                                                                                                |\n|       [`flatten`](#flatten)       |      `{Boolean}`      |                     `false`                     | Removes all directory references and only copies file names.⚠️ If files have the same name, the result is non-deterministic.                                                     |\n|     [`transform`](#transform)     | `{Function\\|Promise}` |          `(content, path) => content`           | Function or Promise that modifies file contents before copying.                                                                                                                  |\n| [`transformPath`](#transformPath) | `{Function\\|Promise}` |       `(targetPath, sourcePath) => path`        | Function or Promise that modifies file writing path.                                                                                                                             |\n|         [`cache`](#cache)         |  `{Boolean\\|Object}`  |                     `false`                     | Enable `transform` caching. You can use `{ cache: { key: 'my-cache-key' } }` to invalidate the cache.                                                                            |\n|       [`context`](#context)       |      `{String}`       | `options.context \\|\\| compiler.options.context` | A path that determines how to interpret the `from` path.                                                                                                                         |\n\n#### `from`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      'relative/path/to/file.ext',\n      '/absolute/path/to/file.ext',\n      'relative/path/to/dir',\n      '/absolute/path/to/dir',\n      '**/*',\n      { glob: '**/*', dot: false },\n    ]),\n  ],\n};\n```\n\n#### `to`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      { from: '**/*', to: 'relative/path/to/dest/' },\n      { from: '**/*', to: '/absolute/path/to/dest/' },\n    ]),\n  ],\n};\n```\n\n#### `toType`\n\n|       Name       |    Type    |   Default   | Description                                                                                        |\n| :--------------: | :--------: | :---------: | :------------------------------------------------------------------------------------------------- |\n|   **`'dir'`**    | `{String}` | `undefined` | If `from` is directory, `to` has no extension or ends in `'/'`                                     |\n|   **`'file'`**   | `{String}` | `undefined` | If `to` has extension or `from` is file                                                            |\n| **`'template'`** | `{String}` | `undefined` | If `to` contains [a template pattern](https://github.com/webpack-contrib/file-loader#placeholders) |\n\n##### `'dir'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'path/to/file.txt',\n        to: 'directory/with/extension.ext',\n        toType: 'dir',\n      },\n    ]),\n  ],\n};\n```\n\n##### `'file'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'path/to/file.txt',\n        to: 'file/without/extension',\n        toType: 'file',\n      },\n    ]),\n  ],\n};\n```\n\n##### `'template'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/',\n        to: 'dest/[name].[hash].[ext]',\n        toType: 'template',\n      },\n    ]),\n  ],\n};\n```\n\n#### `test`\n\nDefines a `{RegExp}` to match some parts of the file path.\nThese capture groups can be reused in the name property using `[N]` placeholder.\nNote that `[0]` will be replaced by the entire path of the file,\nwhereas `[1]` will contain the first capturing parenthesis of your `{RegExp}`\nand so on...\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: '*/*',\n        to: '[1]-[2].[hash].[ext]',\n        test: /([^/]+)\\/(.+)\\.png$/,\n      },\n    ]),\n  ],\n};\n```\n\n#### `force`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/**/*',\n        to: 'dest/',\n        force: true,\n      },\n    ]),\n  ],\n};\n```\n\n#### `ignore`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/**/*',\n        to: 'dest/',\n        ignore: ['*.js'],\n      },\n    ]),\n  ],\n};\n```\n\n#### `flatten`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/**/*',\n        to: 'dest/',\n        flatten: true,\n      },\n    ]),\n  ],\n};\n```\n\n#### `transform`\n\n##### `{Function}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transform(content, path) {\n          return optimize(content);\n        },\n      },\n    ]),\n  ],\n};\n```\n\n##### `{Promise}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transform(content, path) {\n          return Promise.resolve(optimize(content));\n        },\n      },\n    ]),\n  ],\n};\n```\n\n#### `transformPath`\n\n##### `{Function}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transformPath(targetPath, absolutePath) {\n          return 'newPath';\n        },\n      },\n    ]),\n  ],\n};\n```\n\n##### `{Promise}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transformPath(targePath, absolutePath) {\n          return Promise.resolve('newPath');\n        },\n      },\n    ]),\n  ],\n};\n```\n\n#### `cache`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transform(content, path) {\n          return optimize(content);\n        },\n        cache: true,\n      },\n    ]),\n  ],\n};\n```\n\n#### `context`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.txt',\n        to: 'dest/',\n        context: 'app/',\n      },\n    ]),\n  ],\n};\n```\n\n### Options\n\n|                Name                 |    Type     |          Default           | Description                                                                                                                                       |\n| :---------------------------------: | :---------: | :------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------ |\n|       [`logLevel`](#logLevel)       | `{String}`  |        **`'warn'`**        | Level of messages that the module will log                                                                                                        |\n|         [`ignore`](#ignore)         |  `{Array}`  |            `[]`            | Array of globs to ignore (applied to `from`)                                                                                                      |\n|        [`context`](#context)        | `{String}`  | `compiler.options.context` | A path that determines how to interpret the `from` path, shared for all patterns                                                                  |\n| [`copyUnmodified`](#copyUnmodified) | `{Boolean}` |          `false`           | Copies files, regardless of modification when using watch or `webpack-dev-server`. All files are copied on first build, regardless of this option |\n\n#### `logLevel`\n\nThis property defines the level of messages that the module will log. Valid levels include:\n\n- `trace`\n- `debug`\n- `info`\n- `warn` (default)\n- `error`\n- `silent`\n\nSetting a log level means that all other levels below it will be visible in the\nconsole. Setting `logLevel: 'silent'` will hide all console output. The module\nleverages [`webpack-log`](https://github.com/webpack-contrib/webpack-log#readme)\nfor logging management, and more information can be found on its page.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { logLevel: 'debug' })],\n};\n```\n\n#### `ignore`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { ignore: ['*.js', '*.css'] })],\n};\n```\n\n#### `context`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { context: '/app' })],\n};\n```\n\n#### `copyUnmodified`\n\n> ℹ️ By default, we only copy **modified** files during a `webpack --watch` or `webpack-dev-server` build. Setting this option to `true` will copy all files.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { copyUnmodified: true })],\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/copy-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/copy-webpack-plugin\n[node]: https://img.shields.io/node/v/copy-webpack-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/copy-webpack-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/copy-webpack-plugin\n[tests]: https://secure.travis-ci.org/webpack-contrib/copy-webpack-plugin.svg\n[tests-url]: http://travis-ci.org/webpack-contrib/copy-webpack-plugin\n[cover]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=copy-webpack-plugin\n[size-url]: https://packagephobia.now.sh/result?p=copy-webpack-plugin\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/copy-webpack-plugin.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --ignore 'src/**/*.test.js' --copy-files",
    "ci:coverage": "npm run test:coverage -- --runInBand",
    "ci:lint": "npm run lint && npm run security",
    "ci:lint:commits": "commitlint --from=origin/master --to=${CIRCLE_SHA1}",
    "ci:test": "npm run test:only -- --runInBand",
    "clean": "del-cli dist",
    "commitlint": "commitlint",
    "commitmsg": "commitlint -e $GIT_PARAMS",
    "defaults": "webpack-defaults",
    "lint": "eslint --cache src test",
    "prebuild": "npm run clean",
    "prepublish": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:only",
    "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
    "test:only": "jest",
    "test:watch": "jest --watch"
  },
  "version": "5.0.1"
}
